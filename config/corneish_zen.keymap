#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

/ {
  chosen {
    //zmk,matrix_transform = &default_transform;
    zmk,matrix_transform = &five_column_transform;
  };
};

// Layer alias.
#define BASE 0
#define NAV 1
#define MEDIA 2
#define NUM 3
#define SYM 4
#define FUNC 5
#define MOUSE 6

// Clipboard keycodes.
#define U_RDO LC(Y)
#define U_PST LC(V)
#define U_CPY LC(C)
#define U_CUT LC(X)
#define U_UND LC(Z)

// Window management keycodes.
#define U_SLFT LG(LS(LEFT))
//#define U_WLFT LG(LEFT) // Replaced by macros
//#define U_WNUP LG(UP)
//#define U_WRGT LG(RIGHT)
#define U_SRGT LG(LS(RIGHT))
#define U_DRGT LG(LC(RIGHT))
#define U_DLFT LG(LC(LEFT))
#define U_DSHW LG(TAB)

#include "combos.dtsi"

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <180>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <180>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/ {
    behaviors {
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <180>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;    // <---[[right-hand keys]]
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <180>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;    // <---[[left-hand keys]]
        };
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        ZMK_MACRO(CBLCK,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
        )
        ZMK_MACRO(UPDIR,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
        )
        ZMK_MACRO(WINLEFT,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings 
                = <&macro_press   &kp LGUI>
                , <&macro_tap     &kp LEFT>
                , <&macro_release &kp LGUI>
                ;
        )
        ZMK_MACRO(WINRGHT,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings 
                = <&macro_press   &kp LGUI>
                , <&macro_tap     &kp RIGHT>
                , <&macro_release &kp LGUI>
                ;
        )
        ZMK_MACRO(WINUP,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings 
                = <&macro_press   &kp LGUI>
                , <&macro_tap     &kp UP>
                , <&macro_release &kp LGUI>
                ;
        )
        ZMK_MACRO(SELWORD,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp RIGHT>
                , <&macro_press   &kp LSHFT>
                , <&macro_tap     &kp LEFT>
                , <&macro_release &kp LCTRL &kp LSHFT>
                ;
        )
        ZMK_MACRO(SELLINE,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_tap     &kp HOME>
                , <&macro_press   &kp LSHFT>
                , <&macro_tap     &kp END>
                , <&macro_release &kp LSHFT>
                ;
        )
        ZMK_MACRO(JOINLN,
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_tap     &kp END>
                , <&macro_tap     &kp DEL>
                , <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp RIGHT>
                , <&macro_tap     &kp LEFT>
                , <&macro_press   &kp LSHFT>
                , <&macro_tap     &kp LEFT>
                , <&macro_tap     &kp RIGHT>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp SPACE>
                ;
        )
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             | ESC | SPC | TAB |   | ENT | BKSP | DEL |
                        bindings = <
   &kp Q       &kp W       &kp E        &kp R         &kp T       &kp Y         &kp U           &kp I           &kp O          &kp P             
   &bhm LGUI A &bhm LALT S &bhm LCTRL D &bhm LSHFT F  &kp G       &kp H         &bhm RSHFT J    &bhm RCTRL K    &bhm RALT L    &bhm RGUI SEMI 
   &lt MOUSE Z &kp X       &kp C        &kp V         &kp B       &kp N         &kp M           &kp COMMA       &kp DOT        &kp FSLH          
                           &lt FUNC ESC &lt NAV SPACE &lt SYM TAB &lt SYM ENTER &lt NUM BSPC    &lt MEDIA DEL 
                        >;
                };
                navigation_layer {
                        label = "NAV";
// -----------------------------------------------------------------------------------------
// |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
// | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |
// |     |     |     |     |     |   |     |     |     |     |     |
//             | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp U_UND  &kp U_CUT  &kp U_CPY  &kp U_PST  &kp U_RDO    &kp U_RDO &kp U_PST &kp U_CPY &kp U_CUT &kp U_UND
   &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &trans       &SELWORD  &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT
   &kp U_SLFT &WINLEFT   &WINUP     &WINRGHT   &kp U_SRGT   &JOINLN   &kp HOME  &kp PG_DN &kp PG_UP &kp END
                          	   &trans     &trans     &trans       &kp ENTER &kp BSPC  &kp DEL
                        >;
                };

                media_layer {
                        label = "MEDIA";
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  
// |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
//             | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans     &trans       &trans       &trans     &trans       &trans &trans &trans &trans &trans
   &kp C_PREV &kp C_VOL_UP &kp C_VOL_DN &kp C_NEXT &trans       &trans &trans &trans &trans &trans
   &trans     &trans       &trans       &trans     &trans       &trans &trans &trans &trans &trans
                    	   &kp C_MUTE   &kp C_PP   &kp C_STOP   &trans &trans &trans
                        >;
                };

                numeral_layer {
                        label = "NUM";
// -----------------------------------------------------------------------------------------
// |  TAB |  '  |  <  |  >  |  "  | ``` |   |  `  |  &  |  [  |  ]  |  %  | BKSP |
// | CTRL |  !  |  -  |  +  |  =  |  #  |   |  _  | "|" |  (  |  )  |  @  |  `   |
// | SHFT |  ^  |  /  |  *  |  \  | ../ |   |  ~  |  $  |  {  |  }  |  ?  |  ~   |
//                    | ALT |CTRL |  _  |   |     |CTRL | ALT |
                        bindings = <
   &kp EQUAL &kp N7 &kp N8   &kp N9 &kp DOT     &trans &trans    &trans     &trans   &trans
   &kp COLON &kp N4 &kp N5   &kp N6 &kp PLUS    &trans &kp RSHFT &kp RCTRL  &kp RALT &kp RGUI
   &kp FSLH  &kp N1 &kp N2   &kp N3 &kp ASTRK   &trans &trans    &trans     &trans   &trans
                          &kp BSPC &kp N0 &kp MINUS   &trans &trans    &trans
                        >;
                };

                symbol_layer {
                        label = "SYM";
// -----------------------------------------------------------------------------------------
// |  '  |  <  |  >  |  "  | ``` |   |  `  |  &  |  [  |  ]  |  %  |
// |  !  |  -  |  +  |  =  |  #  |   |  _  | "|" |  (  |  )  |  @  |
// |  ^  |  /  |  *  |  \  | ../ |   |  ~  |  $  |  {  |  }  |  ?  |
//             | ALT |CTRL |  _  |   |     |CTRL | ALT |
                        bindings = <
   &kp SQT   &kp LT    &kp GT    &kp DQT    &CBLCK      &kp GRAVE &kp AMPS  &kp LBKT &kp RBKT &kp PRCNT
   &kp EXCL  &kp MINUS &kp PLUS  &kp EQUAL  &kp HASH    &kp UNDER &kp PIPE  &kp LPAR &kp RPAR &kp AT
   &kp CARET &kp FSLH  &kp ASTRK &kp BSLH   &UPDIR      &kp TILDE &kp DLLR  &kp LBRC &kp RBRC &kp QMARK
                       &kp LALT  &kp LCTRL  &kp UNDER   &trans    &kp RCTRL &kp RALT
                        >;
                };

                function_layer {
                        label = "FUNC";
// -----------------------------------------------------------------------------------------
// | BT1 | BT2 | BT3 | BT4 | BT5 |   |PSCRN|  F7 |  F8 |  F9 | F12 |
// | GUI | ALT |CTRL |SHFT |     |   |SLCK |  F4 |  F5 |  F6 | F11 |
// |BTCLR|     |     |     |     |   |PAUSE|  F1 |  F2 |  F3 | F10 |
//             |     |     |     |   |     |BKSP | APP |
                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp PSCRN       &kp F7   &kp F8    &kp F9 &kp F12
   &kp LGUI     &kp LALT     &kp LCTRL    &kp LSHFT    &trans         &SELLINE     &kp F4   &kp F5    &kp F6 &kp F11
   &bt BT_CLR   &trans       &trans       &trans       &reset         &kp SLCK        &kp F1   &kp F2    &kp F3 &kp F10 
                             &trans       &trans       &trans         &trans          &kp BSPC &kp K_APP
                        >;
                
                };
                mouse_layer {
                        label = "MOUSE";
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  
// |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
//             | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans     &trans       &trans       &trans     &trans       &kp U_RDO &kp U_PST        &kp U_CPY        &kp U_CUT      &kp U_UND
   &kp LGUI   &kp LALT     &kp LCTRL    &kp LSHFT  &trans       &trans    &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_UP   &mmv MOVE_RIGHT
   &trans     &trans       &trans       &trans     &trans       &trans    &mwh SCROLL_LEFT &mwh SCROLL_DOWN &mwh SCROLL_UP &mwh SCROLL_RIGHT
                    	   &mkp MB5     &mkp MB4   &trans       &mkp RCLK &mkp LCLK        &mkp MCLK
                        >;
                };

        };
};